// <auto-generated>
// This file is generated by Helper+Generated.tt template.
// Do not change this.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace Symphony {
	internal static partial class Helper {
		#region Reflection
		public static Func<RetType> XGetMethod<RetType>(Type type, object obj, string name) {
			var mi = obj.GetType().GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<RetType>(type.BaseType, obj, name);
			}
			return () => (RetType)mi.Invoke(obj, []);
		}
		public static Func<RetType> XGetMethod<RetType>(this object obj, string name) => XGetMethod<RetType>(obj.GetType(), obj, name);

		public static Action<P1> XGetMethodVoid<P1>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1>(type.BaseType, obj, name);
			}
			return (P1 p1) => mi.Invoke(obj, [p1]);
		}
		public static Action<P1> XGetMethodVoid<P1>(this object obj, string name)
			=> XGetMethodVoid<P1>(obj.GetType(), obj, name);

		public static Func<P1, RetType> XGetMethod<P1, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1) => (RetType)mi.Invoke(obj, [p1]);
		}
		public static Func<P1, RetType> XGetMethod<P1, RetType>(this object obj, string name)
			=> XGetMethod<P1, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2> XGetMethodVoid<P1, P2>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2) => mi.Invoke(obj, [p1, p2]);
		}
		public static Action<P1, P2> XGetMethodVoid<P1, P2>(this object obj, string name)
			=> XGetMethodVoid<P1, P2>(obj.GetType(), obj, name);

		public static Func<P1, P2, RetType> XGetMethod<P1, P2, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2) => (RetType)mi.Invoke(obj, [p1, p2]);
		}
		public static Func<P1, P2, RetType> XGetMethod<P1, P2, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2, P3> XGetMethodVoid<P1, P2, P3>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2, P3>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3) => mi.Invoke(obj, [p1, p2, p3]);
		}
		public static Action<P1, P2, P3> XGetMethodVoid<P1, P2, P3>(this object obj, string name)
			=> XGetMethodVoid<P1, P2, P3>(obj.GetType(), obj, name);

		public static Func<P1, P2, P3, RetType> XGetMethod<P1, P2, P3, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, P3, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3) => (RetType)mi.Invoke(obj, [p1, p2, p3]);
		}
		public static Func<P1, P2, P3, RetType> XGetMethod<P1, P2, P3, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, P3, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2, P3, P4> XGetMethodVoid<P1, P2, P3, P4>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2, P3, P4>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4) => mi.Invoke(obj, [p1, p2, p3, p4]);
		}
		public static Action<P1, P2, P3, P4> XGetMethodVoid<P1, P2, P3, P4>(this object obj, string name)
			=> XGetMethodVoid<P1, P2, P3, P4>(obj.GetType(), obj, name);

		public static Func<P1, P2, P3, P4, RetType> XGetMethod<P1, P2, P3, P4, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, P3, P4, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4) => (RetType)mi.Invoke(obj, [p1, p2, p3, p4]);
		}
		public static Func<P1, P2, P3, P4, RetType> XGetMethod<P1, P2, P3, P4, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, P3, P4, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2, P3, P4, P5> XGetMethodVoid<P1, P2, P3, P4, P5>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2, P3, P4, P5>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5) => mi.Invoke(obj, [p1, p2, p3, p4, p5]);
		}
		public static Action<P1, P2, P3, P4, P5> XGetMethodVoid<P1, P2, P3, P4, P5>(this object obj, string name)
			=> XGetMethodVoid<P1, P2, P3, P4, P5>(obj.GetType(), obj, name);

		public static Func<P1, P2, P3, P4, P5, RetType> XGetMethod<P1, P2, P3, P4, P5, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, P3, P4, P5, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5) => (RetType)mi.Invoke(obj, [p1, p2, p3, p4, p5]);
		}
		public static Func<P1, P2, P3, P4, P5, RetType> XGetMethod<P1, P2, P3, P4, P5, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, P3, P4, P5, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2, P3, P4, P5, P6> XGetMethodVoid<P1, P2, P3, P4, P5, P6>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2, P3, P4, P5, P6>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6) => mi.Invoke(obj, [p1, p2, p3, p4, p5, p6]);
		}
		public static Action<P1, P2, P3, P4, P5, P6> XGetMethodVoid<P1, P2, P3, P4, P5, P6>(this object obj, string name)
			=> XGetMethodVoid<P1, P2, P3, P4, P5, P6>(obj.GetType(), obj, name);

		public static Func<P1, P2, P3, P4, P5, P6, RetType> XGetMethod<P1, P2, P3, P4, P5, P6, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, P3, P4, P5, P6, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6) => (RetType)mi.Invoke(obj, [p1, p2, p3, p4, p5, p6]);
		}
		public static Func<P1, P2, P3, P4, P5, P6, RetType> XGetMethod<P1, P2, P3, P4, P5, P6, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, P3, P4, P5, P6, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2, P3, P4, P5, P6, P7> XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7) => mi.Invoke(obj, [p1, p2, p3, p4, p5, p6, p7]);
		}
		public static Action<P1, P2, P3, P4, P5, P6, P7> XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7>(this object obj, string name)
			=> XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7>(obj.GetType(), obj, name);

		public static Func<P1, P2, P3, P4, P5, P6, P7, RetType> XGetMethod<P1, P2, P3, P4, P5, P6, P7, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, P3, P4, P5, P6, P7, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7) => (RetType)mi.Invoke(obj, [p1, p2, p3, p4, p5, p6, p7]);
		}
		public static Func<P1, P2, P3, P4, P5, P6, P7, RetType> XGetMethod<P1, P2, P3, P4, P5, P6, P7, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, P3, P4, P5, P6, P7, RetType>(obj.GetType(), obj, name);
		public static Action<P1, P2, P3, P4, P5, P6, P7, P8> XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7, P8>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7, P8>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8) => mi.Invoke(obj, [p1, p2, p3, p4, p5, p6, p7, p8]);
		}
		public static Action<P1, P2, P3, P4, P5, P6, P7, P8> XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7, P8>(this object obj, string name)
			=> XGetMethodVoid<P1, P2, P3, P4, P5, P6, P7, P8>(obj.GetType(), obj, name);

		public static Func<P1, P2, P3, P4, P5, P6, P7, P8, RetType> XGetMethod<P1, P2, P3, P4, P5, P6, P7, P8, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<P1, P2, P3, P4, P5, P6, P7, P8, RetType>(type.BaseType, obj, name);
			}
			return (P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8) => (RetType)mi.Invoke(obj, [p1, p2, p3, p4, p5, p6, p7, p8]);
		}
		public static Func<P1, P2, P3, P4, P5, P6, P7, P8, RetType> XGetMethod<P1, P2, P3, P4, P5, P6, P7, P8, RetType>(this object obj, string name)
			=> XGetMethod<P1, P2, P3, P4, P5, P6, P7, P8, RetType>(obj.GetType(), obj, name);
		#endregion
	}
}
	