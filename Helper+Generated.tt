<#@ template language="C#" #>
<#@ output extension=".cs" #>
// <auto-generated>
// This file is generated by Helper+Generated.tt template.
// Do not change this.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace Symphony {
	internal static partial class Helper {
		#region Reflection
		public static Func<RetType> XGetMethod<RetType>(Type type, object obj, string name) {
			var mi = obj.GetType().GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, [], null);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<RetType>(type.BaseType, obj, name);
			}
			return () => (RetType)mi.Invoke(obj, []);
		}
		public static Func<RetType> XGetMethod<RetType>(this object obj, string name) => XGetMethod<RetType>(obj.GetType(), obj, name);

<#
for (int i = 1; i <= 8; i++) {
	var genericMember = "";
	var methodMember = "";
	var parameterMember = "";
	var parameterTypes = "";
	for (int j = 1; j <= i; j++) {
		genericMember += (j > 1 ? ", " : "") + $"P{j}";
		methodMember += (j > 1 ? ", " : "") + $"P{j} p{j}";
		parameterMember += (j > 1 ? ", " : "") + $"p{j}";
		parameterTypes += (j > 1 ? ", " : "") + $"typeof(P{j})";
	}
#>
		public static Action<<#= genericMember #>> XGetMethodVoid<<#= genericMember #>>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, [<#= parameterTypes #>], null);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethodVoid<<#= genericMember #>>(type.BaseType, obj, name);
			}
			return (<#= methodMember #>) => mi.Invoke(obj, [<#= parameterMember #>]);
		}
		public static Action<<#= genericMember #>> XGetMethodVoid<<#= genericMember #>>(this object obj, string name)
			=> XGetMethodVoid<<#= genericMember #>>(obj.GetType(), obj, name);

		public static Func<<#= genericMember #>, RetType> XGetMethod<<#= genericMember #>, RetType>(Type type, object obj, string name) {
			var mi = type.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, [<#= parameterTypes #>], null);
			if (mi == null) {
				if (type.BaseType == null) return null;
				return XGetMethod<<#= genericMember #>, RetType>(type.BaseType, obj, name);
			}
			return (<#= methodMember #>) => (RetType)mi.Invoke(obj, [<#= parameterMember #>]);
		}
		public static Func<<#= genericMember #>, RetType> XGetMethod<<#= genericMember #>, RetType>(this object obj, string name)
			=> XGetMethod<<#= genericMember #>, RetType>(obj.GetType(), obj, name);
<#
}
#>
		#endregion
	}
}
	